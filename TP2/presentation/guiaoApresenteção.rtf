{\rtf1\ansi\ansicpg1252\cocoartf2577
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww22460\viewh17060\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs32 \cf2 \cb3 Atualmente, as variadas fontes de informa\'e7\'e3o possuem um elevado tamanho, o que causa alguns constrangimentos na hora de as armazenar, devido ao tamanho limitado e ao pre\'e7o do armazenamento, e na hora  de os transmitir em rede, devido \'e0 largura de banda limitada. Como tal, torna-se necess\'e1rio comprimi-los e diminuir o seu tamanho de modo a poupar nestes recursos.\
Existem dois tipos de compress\'e3o: lossy e lossless. Neste trabalho s\'f3 foram analisados m\'e9todos de compress\'e3o lossless, que, ao contr\'e1rio dos lossy, se caraterizam por manter toda a informa\'e7\'e3o da fonte ap\'f3s a compress\'e3o.\
Ao longo do semestre, nas aulas te\'f3ricas, foram abordados diversos m\'e9todos de compress\'e3o lossless, tais como LZ77, Huffman Coding, C\'f3digos Aritm\'e9ticos, etc, que foram analisados, de modo a escolher o melhor para comprimir  as quatro imagens monocrom\'e1ticas que nos foram fornecidas.\
Nesta escolha, foram tidos em conta fatores como a efic\'e1cia de compress\'e3o (tamanho da imagem final comparativamente com a original), velocidade de compress\'e3o, complexidade da compress\'e3o (exig\'eancias a n\'edvel do hardware requeridas pelos diversos m\'e9todos de compress\'e3o) e robustez.\
Com base nos papers fornecidos, nos conhecimentos adquiridos nas aulas e nos fatores referidos anteriormente, acabamos por optar pelo BZIP2, por possuir o melhor equil\'edbrio entre velocidade e taxa de compress\'e3o. Embora possua uma taxa de compress\'e3o ligeiramente inferior aos codecs da familia PPM (Prediction by Partial Matching), consegue ser superior a estes em velocidade, tanto de compress\'e3o como de descompress\'e3o. Mostra-se melhor a comprimir do que o Deflate ( que usa uma combina\'e7\'e3o de LZ e Huffman) e o LZMA. Al\'e9m disto, o BZIP2 possui Run-length Encoding, ideal para dados onde existe v\'e1rias vezes a repeti\'e7\'e3o dos mesmo s\'edmbolos, tal como nas imagens monocrom\'e1ticas. Posto isto, o BZIP2 pareceu-mos a melhor escolha.\
O BZIP2 foi criado em 1996 por Julian Seward, tendo sido disponibilizado em Open Source (qualquer pessoa tem acesso ao c\'f3digo), e e\expnd0\expndtw0\kerning0
nvolve v\'e1rias algoritmos de compress\'e3o, tais como Run-length Encoding (RLE), Burrows-Wheeler Transform, Move to Front Transform, Huffman Coding, etc.\
Na constru\'e7\'e3o do nosso programa de compress\'e3o, foi utilizado o m\'f3dulo bz2 do python, que possui fun\'e7\'f5es para a compress\'e3o e descompress\'e3o de ficheiros utilizando o BZIP2. \
(Explica\'e7\'e3o do programa)\'85\
Com o nosso programa, conseguimos alcan\'e7ar bons resultados na compress\'e3o das imagens fornecidas, ficando o tamanho das imagens comprimidas muito pr\'f3ximo do tamanho das imagens PNG, sendo que na compress\'e3o da imagem \'93pattern.bmp\'94, o nosso programa consegue mesmo superar a imagem PNG.}